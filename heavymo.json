[{"_id":"Default-1619175317363","name":"Default","type":"expression","creation_date":1619175317364,"expressions":[{"_id":"-Counter-with-commas-instead-of-dots--and-extra-characters-1619180003019","code":"_ slider: Slider Control: create _;\nc = parseFloat(effect(\"Slider Control\")(\"Slider\")).toFixed(1) + \" €\";\nc.toString().replace(\".\", \",\")\n","name":"Counter with commas instead of dots  and extra characters","documentation":"Counter with commas instead of dots  and extra characters","last_update":1619180384201},{"_id":"Constant-Scale-at-Scale-1619179672357","code":"s = [];\r\nps = parent.transform.scale.value;\r\nfor (i = 0; i < ps.length; i++){\r\ns[i] = value[i]*100/ps[i];\r\n}\r\ns","name":"Constant Scale at Scale","documentation":"apply to children scale","last_update":1619179748207},{"_id":"Counter-for-large-numbers-1619181154105","code":"_ angle: Angle Control: create _;\r\nnumber = Math.round(effect(\"Angle Control\")(\"Angle\")/360);\r\n\r\nn=\"\" + number;\r\ns=\"\";\r\nfor(i=0, l=n.length; i<l;  i++){\r\n    if(s && s!=\"-\" && (l-i)%3 ==0)\r\n                s+=\" \"; \r\n        s += n[i];\r\n}\r\ns;","name":"Counter for large numbers","documentation":"Counter for large numbers","last_update":1619181193397},{"_id":"Counter-with-replacement-1-with-001-1619180437239","code":"var zerosAmount = _ slider: Zeros Amount: create _;\nvar slider = _ slider: Slider Control: create _;\n\nfunction padStart(string, targetLength, character) {\n\tstring = (string instanceof String) ? string : string.toString();\n\ttargetLength = targetLength >> 0;\n\tcharacter = character || ' ';\n\n\twhile (string.length < targetLength) {\n\t\tstring = character + string;\n\t}\n\nreturn string;\n};\n\nif (slider >= 0) {\nzeroAmount = zerosAmount + 1;\npaddedString = padStart(parseFloat(slider.value).toFixed(0), zerosAmount, '0');\n}\n\nelse {\npaddedString = '-0'+padStart(parseFloat(slider.value).toFixed(0)*-1, zerosAmount, '0');\n}\n\npaddedString;\n","name":"Counter with replacement 1 with 001","documentation":"Counter with replacement 1 with 001","last_update":1619181118946},{"_id":"Counter-with-subdivisions-1619180622743","code":"_ slider: Slider Control: create _;\n\nnum = parseFloat(effect(\"Slider Control\")(\"Slider\")).toFixed(0);\nstr = isNaN(num) ? \"\" : (num * 1 + \"\");\nstr.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n","name":"Counter with subdivisions","is_snippet":false,"last_update":1619181070928},{"_id":"Digit-separator-1619188428639","code":"function Comma(number)\r\n{\r\nnumber = '' + Math.round(number);\r\nif (number.length > dig)\r\n{\r\nvar mod = number.length % dig;\r\nvar output = (mod > 0 ? (number.substring(0,mod)) : '');\r\nfor (i=0 ; i < Math.floor(number.length / dig); i++)\r\n{\r\nif ((mod == 0) && (i == 0))\r\noutput += number.substring(mod+ dig * i, mod + dig * i + dig);\r\nelse\r\noutput+= sym + number.substring(mod + dig * i, mod + dig * i + dig);\r\n}\r\nreturn (output);\r\n}\r\nelse return number;\r\n}\r\n\r\nvar num = effect(\"Slider Control\")(\"Slider\"); // Slider Control\r\nsym = '.'; // A symbol that will separate numbers. You can put a space\r\nwordL = \"$\"; // The word before the number\r\nwordR = \" \"; // The word after the number\r\ndig = 3; // The number of digits followed by a separator\r\nnum =wordL+ Comma(num) + wordR;\r\n\r\n[num]","name":"Digit separator","last_update":1619188431535},{"_id":"Every-second-step-rotations-1619179353554","code":"var angle = _ slider: angle: create _;\r\nvar rotateDuration = _ slider: rotateDuration: create _;\r\nvar timeStop = _ slider: timeStop: create _;\r\nvar offset = _ slider: offset: create _;\r\n\r\nfr = timeToFrames(time)+offset;\r\n\r\ncycle = timeStop+rotateDuration;\r\nn = Math.floor(fr/cycle);\r\ncur_phase = fr-n*cycle;\r\n\r\nif((cur_phase)>timeStop){\r\nangle*n+(cur_phase-timeStop)*angle/rotateDuration;\r\n}\r\nelse{\r\nangle*n;\r\n}","name":"Every-second step rotations","documentation":"Every-second step rotations","last_update":1619179461623},{"_id":"Layer-Referencing-1619181260710","code":"thisComp.layer(index-1).transform.rotation+20","name":"Layer Referencing","documentation":"This index expression rotates a layer 20 degrees more than the one above it.","last_update":1619181280467},{"_id":"Loop-Wiggle-1619188529493","code":"var amp = _ slider: Wiggle Amplitude: create _;\nvar freq = _ slider: Wiggle Frequency: create _;\nvar loopTime = _ slider: Wiggle loopTime sec: create _;\n\nt = time % loopTime;\nwiggle1 = wiggle(freq, amp, 1, 0.5, t);\nwiggle2 = wiggle(freq, amp, 1, 0.5, t - loopTime);\nlinear(t, 0, loopTime, wiggle1, wiggle2);","name":"Loop Wiggle","last_update":1619188583305},{"_id":"Marker-4-keys-animation-1619188323427","code":"try{\r\nif(marker.numKeys>1&&numKeys>1){\r\nbeginAnim=marker.key(1).time;\r\nendAnim=marker.key(2).time;\r\nmarkerMoveTime=endAnim-beginAnim;\r\nkeyStart=key(1).time; \r\nkeyStartN=key(2).time;\r\nkeyEnd=key(3).time;\r\nif(time>=beginAnim && time<=endAnim)\r\n{if((time-beginAnim)>=(keyStartN-keyStart)){valueAtTime(keyStartN);}\r\nelse valueAtTime(keyStart+(time-beginAnim));\r\n}\r\nelse if(time>endAnim)\r\n{valueAtTime(keyEnd+(time-endAnim));}\r\nelse if(time<beginAnim) {valueAtTime(keyStart);}\r\nelse {value;}\r\n}else value;\r\n}catch(err){value;}","name":"Marker 4 keys animation","last_update":1619188327697},{"_id":"Proportional-Wiggle-for-Scale-1619175906113","code":"var amp = _ slider: Wiggle Amplitude: create _;\nvar freq = _ slider: Wiggle Frequency: create _;\n\nw = wiggle(freq,amp);\n[w[0],w[0]];","name":"Proportional Wiggle for Scale","documentation":"Proportional Wiggle for Scale","last_update":1619176215661},{"_id":"Random-binary-block-1619181419843","code":"rows = 8;\r\ncols = 16;\r\nfreq = 5;\r\n\r\nposterizeTime(freq);\r\nrandMin = Math.pow(2,cols);\r\nrandMax = randMin*2;\r\ns = \"\";\r\n\r\nfor(i =0; i < rows; i++){\r\n  s += random(randMin,randMax).toString(2).substr(1) + \"\\r\";\r\n}\r\ns\r\n","name":"Random binary block","documentation":"Random binary block 0100110010010001","last_update":1619182539825},{"_id":"Shape-Path-loop-1619179932045","code":"try{\r\npingPong = false; // Поставьте true, если нужен pingPong\r\n\r\ntimeStart = thisProperty.key(1).time;\r\nduration = thisProperty.key(thisProperty.numKeys).time-timeStart;\r\nquant=Math.floor((time-timeStart)/duration);\r\n\r\nif(quant<0) quant = 0\r\n\r\nif(quant%2 == 1 && pingPong == true){\r\nt = 2*timeStart+ (quant+1)*duration - time;\r\n}\r\n\r\nelse{\r\nt = time-quant*duration;\r\n}\r\n}\r\ncatch(err){\r\nt = time;\r\n}\r\nthisProperty.valueAtTime(t)","name":"Shape Path loop","documentation":"Shape Path loop","last_update":1619179939768},{"_id":"Switch-by-checkbox-1619179759237","code":"_ checkbox: Checkbox Control: static _;\nif (effect(\"Checkbox Control\")(1) == 0) 0;\n\telse 100;","name":"Switch by checkbox","documentation":"Switch by checkbox","last_update":1619180399849},{"_id":"Text-box-shape-1619177682821","code":"var margin_width = _ slider: Margin width: create _;\nvar margin_height = _ slider: Margin height: create _;\n\ntext_width = thisComp.layer(index-1).sourceRectAtTime().width;\ntext_height = thisComp.layer(index-1).sourceRectAtTime().height;\n\nbox_width = text_width + margin_width*2;\nbox_height = text_height + margin_height*2;\n\n[box_width, box_height];\n\n//apply to position if text in 2 lines\n//x = value[0];\n//y = content(\"Group 1\").content(\"Rectangle Path 1\").size[1]/2;\n//[x,y]","name":"Text box shape","documentation":"Text box shape","last_update":1619178479044},{"_id":"Universal-counter-and-currency-formatter-1619181384925","code":"numDecimals = 2;\r\ncommas = true;\r\ndollarSign = true;\r\nbeginCount = -1999;\r\nendCount = 1999;\r\ndur = 4;\r\n\r\nt = time - inPoint;\r\ns = linear (t, 0, dur, beginCount, endCount).toFixed(numDecimals);\r\n \r\nprefix = \"\";\r\nif (s[0] == \"-\"){\r\n  prefix = \"-\";\r\n  s = s.substr(1);\r\n}\r\nif(dollarSign) prefix += \"$\";\r\n \r\nif (commas){\r\n  decimals = \"\";\r\n  if (numDecimals > 0){\r\n    decimals = s.substr(-(numDecimals + 1));\r\n    s = s.substr(0,s.length - (numDecimals + 1));\r\n  }\r\n  outStr = s.substr(-s.length, (s.length-1)%3 +1);\r\n  for (i = Math.floor((s.length-1)/3); i > 0; i--){\r\n    outStr += \",\" + s.substr(-i*3,3);\r\n  }\r\n  prefix + outStr + decimals;\r\n}else{\r\n  prefix + s;\r\n}","name":"Universal counter and currency formatter","documentation":"Universal counter and currency formatter","last_update":1619181406288},{"_id":"Universal-up-down-clock-1619181291169","code":"rate = -2;\r\nclockStart = 3604.999;\r\n \r\nfunction padZero(n){\r\n  return (n < 10 ? \"0\" : \"\") + n;\r\n}\r\n \r\nclockTime = clockStart + rate*(time - inPoint);\r\n \r\nif (clockTime < 0){\r\n  sign = \"-\";\r\n  clockTime = -clockTime;\r\n}else{\r\n  sign = \"\";\r\n}\r\n \r\nt = Math.floor(clockTime);\r\nhr = Math.floor(t/3600);\r\nmin = Math.floor((t%3600)/60);\r\nsec = Math.floor(t%60);\r\nms = clockTime.toFixed(3).substr(-3);\r\nsign + padZero(hr) + \":\" + padZero(min) + \":\" + padZero(sec) + \".\" + ms","name":"Universal up down clock","documentation":"Universal up down clock","last_update":1619181318168},{"_id":"Wiggle-1619185484694","code":"var amp = _ slider: Wiggle Amplitude: create _;\nvar freq = _ slider: Wiggle Frequency: create _;\nwiggle(freq, amp);","name":"Wiggle","documentation":"Wiggle","last_update":1619185492673},{"_id":"Wiggle-one-dimension-only-1619181443047","code":"var amp = _ slider: Wiggle Amplitude: create _;\nvar freq = _ slider: Wiggle Frequency: create _;\n\nx = wiggle(freq,amp);\n[x[0],value[1]];","name":"Wiggle x only","documentation":"Wiggle x only","last_update":1619182381134},{"_id":"Wiggle-y-only-1619182424164","code":"var amp = _ slider: Wiggle Amplitude: create _;\nvar freq = _ slider: Wiggle Frequency: create _;\n\ny = wiggle(freq,amp);\n[value[0],y[1]];","name":"Wiggle y only","last_update":1619182441205}]}]